// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package r

import (
	"database/sql/driver"
	"fmt"
    "time"
)

type Country string

const (
	CountryCA Country = "CA"
	CountryUS Country = "US"
	CountryUK Country = "UK"
	CountryAU Country = "AU"
	CountryNZ Country = "NZ"
)

func (e *Country) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Country(s)
	case string:
		*e = Country(s)
	default:
		return fmt.Errorf("unsupported scan type for Country: %T", src)
	}
	return nil
}

type NullCountry struct {
	Country Country `json:"country"`
	Valid   bool    `json:"valid"` // Valid is true if Country is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCountry) Scan(value interface{}) error {
	if value == nil {
		ns.Country, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Country.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCountry) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Country), nil
}

type Currency string

const (
	CurrencyUSD Currency = "USD"
	CurrencyCAD Currency = "CAD"
	CurrencyEUR Currency = "EUR"
	CurrencyGBP Currency = "GBP"
	CurrencyAUD Currency = "AUD"
	CurrencyNZD Currency = "NZD"
)

func (e *Currency) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Currency(s)
	case string:
		*e = Currency(s)
	default:
		return fmt.Errorf("unsupported scan type for Currency: %T", src)
	}
	return nil
}

type NullCurrency struct {
	Currency Currency `json:"currency"`
	Valid    bool     `json:"valid"` // Valid is true if Currency is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCurrency) Scan(value interface{}) error {
	if value == nil {
		ns.Currency, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Currency.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCurrency) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Currency), nil
}

type Domain string

const (
	DomainNEWS   Domain = "NEWS"
	DomainGUIDES Domain = "GUIDES"
)

func (e *Domain) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Domain(s)
	case string:
		*e = Domain(s)
	default:
		return fmt.Errorf("unsupported scan type for Domain: %T", src)
	}
	return nil
}

type NullDomain struct {
	Domain Domain `json:"domain"`
	Valid  bool   `json:"valid"` // Valid is true if Domain is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDomain) Scan(value interface{}) error {
	if value == nil {
		ns.Domain, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Domain.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDomain) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Domain), nil
}

type Lan string

const (
	LanEN   Lan = "EN"
	LanFR   Lan = "FR"
	LanPA   Lan = "PA"
	LanFA   Lan = "FA"
	LanCN   Lan = "CN"
	LanCNHK Lan = "CN_HK"
)

func (e *Lan) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Lan(s)
	case string:
		*e = Lan(s)
	default:
		return fmt.Errorf("unsupported scan type for Lan: %T", src)
	}
	return nil
}

type NullLan struct {
	Lan   Lan  `json:"lan"`
	Valid bool `json:"valid"` // Valid is true if Lan is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLan) Scan(value interface{}) error {
	if value == nil {
		ns.Lan, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Lan.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLan) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Lan), nil
}

type ListingRole string

const (
	ListingRoleSELLERAGENT ListingRole = "SELLER_AGENT"
	ListingRoleBUYERAGENT  ListingRole = "BUYER_AGENT"
)

func (e *ListingRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ListingRole(s)
	case string:
		*e = ListingRole(s)
	default:
		return fmt.Errorf("unsupported scan type for ListingRole: %T", src)
	}
	return nil
}

type NullListingRole struct {
	ListingRole ListingRole `json:"listingRole"`
	Valid       bool        `json:"valid"` // Valid is true if ListingRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullListingRole) Scan(value interface{}) error {
	if value == nil {
		ns.ListingRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ListingRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullListingRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ListingRole), nil
}

type ListingStatus string

const (
	ListingStatusACTIVE    ListingStatus = "ACTIVE"
	ListingStatusINACTIVE  ListingStatus = "INACTIVE"
	ListingStatusSOLD      ListingStatus = "SOLD"
	ListingStatusRENTED    ListingStatus = "RENTED"
	ListingStatusWITHDRAWN ListingStatus = "WITHDRAWN"
	ListingStatusEXPIRED   ListingStatus = "EXPIRED"
	ListingStatusDELETED   ListingStatus = "DELETED"
)

func (e *ListingStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ListingStatus(s)
	case string:
		*e = ListingStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ListingStatus: %T", src)
	}
	return nil
}

type NullListingStatus struct {
	ListingStatus ListingStatus `json:"listingStatus"`
	Valid         bool          `json:"valid"` // Valid is true if ListingStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullListingStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ListingStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ListingStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullListingStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ListingStatus), nil
}

type MediaType string

const (
	MediaTypeIMAGE MediaType = "IMAGE"
	MediaTypeVIDEO MediaType = "VIDEO"
	MediaTypeURL   MediaType = "URL"
)

func (e *MediaType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MediaType(s)
	case string:
		*e = MediaType(s)
	default:
		return fmt.Errorf("unsupported scan type for MediaType: %T", src)
	}
	return nil
}

type NullMediaType struct {
	MediaType MediaType `json:"mediaType"`
	Valid     bool      `json:"valid"` // Valid is true if MediaType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMediaType) Scan(value interface{}) error {
	if value == nil {
		ns.MediaType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MediaType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMediaType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MediaType), nil
}

type OrderStatus string

const (
	OrderStatusPENDING   OrderStatus = "PENDING"
	OrderStatusCOMPLETED OrderStatus = "COMPLETED"
	OrderStatusFAILED    OrderStatus = "FAILED"
	OrderStatusCANCELLED OrderStatus = "CANCELLED"
	OrderStatusREFUNDED  OrderStatus = "REFUNDED"
	OrderStatusEXPIRED   OrderStatus = "EXPIRED"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus `json:"orderStatus"`
	Valid       bool        `json:"valid"` // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type OrderType string

const (
	OrderTypeSUBSCRIPTION OrderType = "SUBSCRIPTION"
	OrderTypeTOKEN        OrderType = "TOKEN"
	OrderTypeLISTING      OrderType = "LISTING"
)

func (e *OrderType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderType(s)
	case string:
		*e = OrderType(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderType: %T", src)
	}
	return nil
}

type NullOrderType struct {
	OrderType OrderType `json:"orderType"`
	Valid     bool      `json:"valid"` // Valid is true if OrderType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderType) Scan(value interface{}) error {
	if value == nil {
		ns.OrderType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderType), nil
}

type Role string

const (
	RoleADMIN Role = "ADMIN"
	RoleFREE  Role = "FREE"
	RolePRO   Role = "PRO"
	RoleULTRA Role = "ULTRA"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type NullRole struct {
	Role  Role `json:"role"`
	Valid bool `json:"valid"` // Valid is true if Role is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRole) Scan(value interface{}) error {
	if value == nil {
		ns.Role, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Role.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Role), nil
}

type SourceType string

const (
	SourceTypeLISTING SourceType = "LISTING"
	SourceTypeCONTENT SourceType = "CONTENT"
)

func (e *SourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SourceType(s)
	case string:
		*e = SourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for SourceType: %T", src)
	}
	return nil
}

type NullSourceType struct {
	SourceType SourceType `json:"sourceType"`
	Valid      bool       `json:"valid"` // Valid is true if SourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSourceType) Scan(value interface{}) error {
	if value == nil {
		ns.SourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SourceType), nil
}

type Agent struct {
	ID          string           `json:"id"`
	Description string           `json:"description"`
	Prompt      string           `json:"prompt"`
	SourceType  SourceType       `json:"source_type"`
	IsFree      bool             `json:"is_free"`
	Url         string           `json:"url"`
	DataSchema  []byte           `json:"data_schema"`
	CreatedAt   time.Time`json:"created_at"`
	UpdatedAt   time.Time`json:"updated_at"`
	TokenRate   int32            `json:"token_rate"`
	CostTokens  int32            `json:"cost_tokens"`
}

type Listing struct {
	ID                     string           `json:"id"`
	MlsID                  string           `json:"mls_id"`
	Zpid                   string           `json:"zpid"`
	ZillowUrl              string           `json:"zillow_url"`
	ListingRole            ListingRole      `json:"listing_role"`
	HouseOriginalPic       string           `json:"house_original_pic"`
	HouseTransparentPicCut string           `json:"house_transparent_pic_cut"`
	Status                 ListingStatus    `json:"status"`
	IsPaid                 bool             `json:"is_paid"`
	Title                  string           `json:"title"`
	Description            string           `json:"description"`
	Metadata               []byte           `json:"metadata"`
	Country                Country          `json:"country"`
	Province               string           `json:"province"`
	City                   string           `json:"city"`
	PostalCode             string           `json:"postal_code"`
	UserID                 string           `json:"user_id"`
	CreatedAt              time.Time`json:"created_at"`
	UpdatedAt              time.Time`json:"updated_at"`
}

type Order struct {
	ID               string           `json:"id"`
	UserID           string           `json:"user_id"`
	Type             OrderType        `json:"type"`
	Amount           int32            `json:"amount"`
	Currency         Currency         `json:"currency"`
	StripeID         string      `json:"stripe_id"`
	StripeProductID  string      `json:"stripe_product_id"`
	StripePriceID    string      `json:"stripe_price_id"`
	StripeCustomerID string      `json:"stripe_customer_id"`
	StripeSessionID  string      `json:"stripe_session_id"`
	ListingID        string      `json:"listing_id"`
	Status           OrderStatus      `json:"status"`
	Metadata         []byte           `json:"metadata"`
	CreatedAt        time.Time`json:"created_at"`
	UpdatedAt        time.Time`json:"updated_at"`
}

type Poster struct {
	ID          string           `json:"id"`
	Address     string           `json:"address"`
	Description string           `json:"description"`
	Data        []byte           `json:"data"`
	SourceType  SourceType       `json:"source_type"`
	MediaType   MediaType        `json:"media_type"`
	Language    Lan              `json:"language"`
	Country     Country          `json:"country"`
	CreatedAt   time.Time`json:"created_at"`
	UpdatedAt   time.Time`json:"updated_at"`
	UserID      string           `json:"user_id"`
	AgentID     string           `json:"agent_id"`
	ListingID   string      `json:"listing_id"`
	SourceID    string      `json:"source_id"`
	Token       int32            `json:"token"`
}

type Source struct {
	ID         string           `json:"id"`
	Title      string           `json:"title"`
	Url        string           `json:"url"`
	RawContent string           `json:"raw_content"`
	Content    string           `json:"content"`
	Country    Country          `json:"country"`
	Province   string           `json:"province"`
	City       string           `json:"city"`
	PostalCode string           `json:"postal_code"`
	IsPublic   bool             `json:"is_public"`
	CreatedAt  time.Time    `json:"created_at"`
	UpdatedAt  time.Time     `json:"updated_at"`
	UserID     string           `json:"user_id"`
}

type SourceTag struct {
	SourceID string `json:"source_id"`
	TagID    string `json:"tag_id"`
}

type Tag struct {
	ID          string           `json:"id"`
	Name        string           `json:"name"`
	Description string           `json:"description"`
	Domain      Domain           `json:"domain"`
	CreatedAt   int64`json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

type User struct {
	ID                string           `json:"id"`
	FirstName         string           `json:"first_name"`
	LastName          string           `json:"last_name"`
	ZillowUsername    string      `json:"zillow_username"`
	Description       string           `json:"description"`
	Avatar            string           `json:"avatar"`
	Phone             string           `json:"phone"`
	Mobile            string           `json:"mobile"`
	Email             string      `json:"email"`
	UserCoverPic      string           `json:"user_cover_pic"`
	UserCoverPicCut   string           `json:"user_cover_pic_cut"`
	InstantVoiceID    string           `json:"instant_voice_id"`
	Role              Role             `json:"role"`
	RoleExpiredAt     time.Time`json:"role_expired_at"`
	Country           Country          `json:"country"`
	Province          string           `json:"province"`
	City              string           `json:"city"`
	Token             int32            `json:"token"`
	Language          Lan              `json:"language"`
	SecondaryLanguage Lan              `json:"secondary_language"`
	ProviderID        string           `json:"provider_id"`
	CreatedAt         time.Time`json:"created_at"`
	UpdatedAt         time.Time`json:"updated_at"`
}
