// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users ( id,first_name,last_name, email, provider_id, zillow_username)
VALUES ($1,$2,$3,$4,$5,$6)
RETURNING id, first_name, last_name, zillow_username, description, avatar, phone, mobile, email, user_cover_pic, user_cover_pic_cut, instant_voice_id, role, role_expired_at, country, province, city, token, language, secondary_language, provider_id, created_at, updated_at
`

type CreateUserParams struct {
	ID             string      `json:"id"`
	FirstName      string      `json:"first_name"`
	LastName       string      `json:"last_name"`
	Email          pgtype.Text `json:"email"`
	ProviderID     string      `json:"provider_id"`
	ZillowUsername pgtype.Text `json:"zillow_username"`
}

type GetAllUsersBasicRow struct {
	ID             string      `json:"id"`
	FirstName      string      `json:"first_name"`
	LastName       string      `json:"last_name"`
	ZillowUsername pgtype.Text `json:"zillow_username"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.ProviderID,
		arg.ZillowUsername,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.ZillowUsername,
		&i.Description,
		&i.Avatar,
		&i.Phone,
		&i.Mobile,
		&i.Email,
		&i.UserCoverPic,
		&i.UserCoverPicCut,
		&i.InstantVoiceID,
		&i.Role,
		&i.RoleExpiredAt,
		&i.Country,
		&i.Province,
		&i.City,
		&i.Token,
		&i.Language,
		&i.SecondaryLanguage,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserWithZillowUsername = `-- name: CreateUserWithZillowUsername :one
INSERT INTO users (first_name,last_name, zillow_username, provider_id)
VALUES ($1,$2,$3,$4)
RETURNING id, first_name, last_name, zillow_username, description, avatar, phone, mobile, email, user_cover_pic, user_cover_pic_cut, instant_voice_id, role, role_expired_at, country, province, city, token, language, secondary_language, provider_id, created_at, updated_at
`

type CreateUserWithZillowUsernameParams struct {
	FirstName      string      `json:"first_name"`
	LastName       string      `json:"last_name"`
	ZillowUsername pgtype.Text `json:"zillow_username"`
	ProviderID     string      `json:"provider_id"`
}

func (q *Queries) CreateUserWithZillowUsername(ctx context.Context, arg CreateUserWithZillowUsernameParams) (User, error) {
	row := q.db.QueryRow(ctx, createUserWithZillowUsername,
		arg.FirstName,
		arg.LastName,
		arg.ZillowUsername,
		arg.ProviderID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.ZillowUsername,
		&i.Description,
		&i.Avatar,
		&i.Phone,
		&i.Mobile,
		&i.Email,
		&i.UserCoverPic,
		&i.UserCoverPicCut,
		&i.InstantVoiceID,
		&i.Role,
		&i.RoleExpiredAt,
		&i.Country,
		&i.Province,
		&i.City,
		&i.Token,
		&i.Language,
		&i.SecondaryLanguage,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, first_name, last_name, zillow_username, description, avatar, phone, mobile, email, user_cover_pic, user_cover_pic_cut, instant_voice_id, role, role_expired_at, country, province, city, token, language, secondary_language, provider_id, created_at, updated_at FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.ZillowUsername,
			&i.Description,
			&i.Avatar,
			&i.Phone,
			&i.Mobile,
			&i.Email,
			&i.UserCoverPic,
			&i.UserCoverPicCut,
			&i.InstantVoiceID,
			&i.Role,
			&i.RoleExpiredAt,
			&i.Country,
			&i.Province,
			&i.City,
			&i.Token,
			&i.Language,
			&i.SecondaryLanguage,
			&i.ProviderID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, first_name, last_name, zillow_username, description, avatar, phone, mobile, email, user_cover_pic, user_cover_pic_cut, instant_voice_id, role, role_expired_at, country, province, city, token, language, secondary_language, provider_id, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.ZillowUsername,
		&i.Description,
		&i.Avatar,
		&i.Phone,
		&i.Mobile,
		&i.Email,
		&i.UserCoverPic,
		&i.UserCoverPicCut,
		&i.InstantVoiceID,
		&i.Role,
		&i.RoleExpiredAt,
		&i.Country,
		&i.Province,
		&i.City,
		&i.Token,
		&i.Language,
		&i.SecondaryLanguage,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByZillowUsername = `-- name: GetUserByZillowUsername :one
SELECT id, first_name, last_name, zillow_username, description, avatar, phone, mobile, email, user_cover_pic, user_cover_pic_cut, instant_voice_id, role, role_expired_at, country, province, city, token, language, secondary_language, provider_id, created_at, updated_at FROM users
WHERE zillow_username = $1 LIMIT 1
`

func (q *Queries) GetUserByZillowUsername(ctx context.Context, zillowUsername pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByZillowUsername, zillowUsername)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.ZillowUsername,
		&i.Description,
		&i.Avatar,
		&i.Phone,
		&i.Mobile,
		&i.Email,
		&i.UserCoverPic,
		&i.UserCoverPicCut,
		&i.InstantVoiceID,
		&i.Role,
		&i.RoleExpiredAt,
		&i.Country,
		&i.Province,
		&i.City,
		&i.Token,
		&i.Language,
		&i.SecondaryLanguage,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserWithSpecificRole = `-- name: GetUserWithSpecificRole :one
SELECT id, first_name, last_name, zillow_username, description, avatar, phone, mobile, email, user_cover_pic, user_cover_pic_cut, instant_voice_id, role, role_expired_at, country, province, city, token, language, secondary_language, provider_id, created_at, updated_at FROM users
WHERE role = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetUserWithSpecificRole(ctx context.Context, role Role) (User, error) {
	row := q.db.QueryRow(ctx, getUserWithSpecificRole, role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.ZillowUsername,
		&i.Description,
		&i.Avatar,
		&i.Phone,
		&i.Mobile,
		&i.Email,
		&i.UserCoverPic,
		&i.UserCoverPicCut,
		&i.InstantVoiceID,
		&i.Role,
		&i.RoleExpiredAt,
		&i.Country,
		&i.Province,
		&i.City,
		&i.Token,
		&i.Language,
		&i.SecondaryLanguage,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsersWithPaidRoles = `-- name: GetUsersWithPaidRoles :many
SELECT id, first_name, last_name, zillow_username, description, avatar, phone, mobile, email, user_cover_pic, user_cover_pic_cut, instant_voice_id, role, role_expired_at, country, province, city, token, language, secondary_language, provider_id, created_at, updated_at FROM users 
WHERE role IN ('pro', 'ultra')
ORDER BY created_at DESC
`

func (q *Queries) GetUsersWithPaidRoles(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersWithPaidRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.ZillowUsername,
			&i.Description,
			&i.Avatar,
			&i.Phone,
			&i.Mobile,
			&i.Email,
			&i.UserCoverPic,
			&i.UserCoverPicCut,
			&i.InstantVoiceID,
			&i.Role,
			&i.RoleExpiredAt,
			&i.Country,
			&i.Province,
			&i.City,
			&i.Token,
			&i.Language,
			&i.SecondaryLanguage,
			&i.ProviderID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
